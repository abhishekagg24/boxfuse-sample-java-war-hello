name: cc-$(DayOfYear)$(Rev:.r)

parameters:
  - name: enable_gunits
    displayName: Run Unit Tests
    default: false
    type: boolean
  - name: enable_bdd
    displayName: Run BDD Tests
    default: false
    type: boolean
  - name: publish_war
    displayName: Publish war in pipeline
    default: false
    type: boolean

variables:
  - template: variables/build-variables.yml
  - name:  'imageName'
    value: '$(projectName)/$(appName)'
  - name: 'agent-pool'
    value: 'self-hosted-poc-gwonaks'
  - name: 'gw-app-name'
    value: 'cc'
  - name: 'build-dir'
    value: '$(Pipeline.Workspace)/$(appName)'
  - name: 'build-dir-ci'
    value: '$(Pipeline.Workspace)/$(appName)/ci'

# trigger:
#   batch: true
#   branches:
#     include: 
#     - develop
#     - feature/*
#   paths:
#     include:
#     - '*' 
#     exclude:
#     - .gitignore

trigger:
- none

stages:
    - stage: gunit
      displayName: Run GUnit and BDD Tests
      jobs:
      - job: gunitTest
        displayName: Run GUnit Tests
        condition: eq(${{ parameters.enable_gunits }}, True)
        pool:
          name: '$(agent-pool)'
        workspace:
          clean: all
        steps:
          - template: templates/checkout-repo-zip.yml
          - template: templates/compile-gw.yml
          - task: Bash@3
            displayName: 'Run GUnitTests'
            inputs:
              targetType: 'inline'
              script: |
                 ./gwb runSuite -Dsuite=gw.suites.CCExampleServerSuite -Denv=h2mem -Ddir.results=build/unittest-results -Djava.io.tmpdir=$(build-dir)/tmp
              workingDirectory: $(build-dir)
          
          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: |
                **/TEST-*.xml
              searchFolder: '$(build-dir)/build/unittest-results'
              testRunTitle: '$(appName) UnitTest Results'
              failTaskOnFailedTests: false

      - job: bddTest
        displayName: Run BDD Tests
        condition: eq(${{ parameters.enable_bdd }}, True)
        #TODO

    - stage: buildapp
      displayName: Build and publish application image
      condition: |
            notIn(dependencies.gunitTest.result, 'Canceled', 'Failed')
      jobs:
      - job: buildImage
        displayName: Build app image
        pool:
          name: '$(agent-pool)'
        workspace:
          clean: all
        steps:
          - template: templates/checkout-repo-zip.yml
          - template: templates/replace-gw-config-files.yml
          - template: templates/compile-gw.yml
          - task: Bash@3
            displayName: 'Build WAR'
            inputs:
              targetType: 'inline'
              script: |
                chmod +x gwb
                ./gwb warTomcatJndi
              workingDirectory: $(build-dir)
          - task: Bash@3
            displayName: Prepare deployment files
            inputs:
              targetType: 'inline'
              script: |
                sed -i "s|APP_CODE_PLACEHOLDER|$(appName)|g" ci/Dockerfile
                sed -i "s|IMAGE_NAME_PLACEHOLDER|$(imageFullName)|g" ci/k8s/deployment.yml
                sed -i "s|TOMCAT_BASE_IMAGE_PLACEHOLDER|$(tomcatBaseImageName)|g" ci/Dockerfile
              workingDirectory: '$(build-dir)'
         
          - task: Docker@2
            displayName: Login to Container Registry
            inputs:
              containerRegistry: '$(acrServiceConnection)'
              command: login

          - task: Docker@2
            displayName: Docker Build
            inputs:
              repository: '$(imageName)'
              command: 'build'
              Dockerfile: '$(build-dir)/ci/Dockerfile'
              buildContext: '$(build-dir)/dist/wars/TomcatJndi'
              tags: '$(imageTag)'

          - task: Docker@2
            displayName: Docker Push
            inputs:
              containerRegistry: '$(acrServiceConnection)'
              repository: '$(imageName)'
              command: 'push'
              tags: '$(imageTag)' 
              
          - task: PublishPipelineArtifact@1
            displayName: 'Publish Pipeline Artifacts (k8s)'
            inputs:
              targetPath: '$(build-dir-ci)/k8s'
              artifact: 'manifests'
              publishLocation: 'pipeline'
          
          - task: Bash@3
            displayName: 'Add BuildId and SHA to war name'
            condition: eq(${{ parameters.publish_war }}, True)
            inputs:
              targetType: 'inline'
              script: |
                 mv $(appName).war $(appName)_b$(Build.BuildId)-$(commit_id).war
              failOnStderr: true
              workingDirectory: $(build-dir)/dist/wars/TomcatJndi

          - task: PublishPipelineArtifact@1
            displayName: 'Publish Pipeline Artifacts (war)'
            condition: eq(${{ parameters.publish_war }}, True)
            inputs:
              targetPath: '$(build-dir)/dist/wars/TomcatJndi/$(appName)_b$(Build.BuildId)-$(commit_id).war'
              artifact: 'war'

          


